#!/usr/bin/env python3
# coding=utf-8
#
"""
Command returning paths to build directories corresponding to directories
in source code repositories with a BINARY_DIR file containing directory path.
"""
import sys
import os

def __print_err(message):
    print("error: %s" % message, file=sys.stderr)

def __is_root_path(os_path):
    return os_path == '/'

def get_binary_dir_path(original_path):
    """
    Returns the path to the binary build directory corresponding to source
    directory in a code repository.
    """
    src_dir_path = os.path.realpath(original_path)
    if not os.path.isdir(src_dir_path):
        __print_err("path '%s' does not point to directory" % original_path)
        return

    binary_dir_path = None
    rel_dirs = []

    while True:
        binary_dir_file_path = os.path.join(src_dir_path, "BINARY_DIR")
        if os.path.isfile(binary_dir_file_path):
            with open(binary_dir_file_path, 'rt') as binary_dir_file:
                line = binary_dir_file.readline().rstrip()
                if os.path.isdir(line):
                    binary_dir_path = os.path.realpath(line)
                    break
                else:
                    __print_err(
                        "the '%s' file does not contain directory path" %
                        binary_dir_file_path
                    )
                    return

        if __is_root_path(src_dir_path):
            break

        rel_dirs = [os.path.basename(src_dir_path)] + rel_dirs
        src_dir_path = os.path.dirname(src_dir_path)

    if binary_dir_path is None or not os.path.isdir(binary_dir_path):
        __print_err("the 'BINARY_DIR' file not found in '%s'" % original_path)
        return

    return os.path.join(binary_dir_path, *rel_dirs)

def print_binary_dir_path(original_path):
    """
    Prints the path to the binary build directory corresponding to source
    directory in a code repository into standard output.
    """
    result_path = get_binary_dir_path(original_path)
    if result_path is not None:
        print(result_path)
        return True
    else:
        return False

def main(args):
    """ The main entry point.
    """
    error_count = 0
    for arg in args:
        try:
            if not print_binary_dir_path(arg):
                error_count += 1
        except IOError as io_error:
            __print_err(str(io_error))
            error_count += 1
    return error_count

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:] if len(sys.argv) > 1 else [os.getcwd()]))

